include ./omnetpp.ini

# Controlling the log output
cmdenv-express-mode = true

[Config Newscast]
network = NewscastNetwork
sim-time-limit = 20s

# Controlling the log output
cmdenv-express-mode = true

# Global
# -- Churn:
#NewscastNetwork.churnModel = "StaticChurn"
#NewscastNetwork.churnModerator.arrivalTime = uniform(2, 3)
#NewscastNetwork.churnModerator.departureTime = uniform(sim-time-limit-1, sim-time-limit)
*.churnModel = "UniformChurn"
*.churnModerator.lowerBoundAT = 0.1s
*.churnModerator.upperBoundAT = 1.0s
*.churnModerator.lowerBoundDT = 2s
*.churnModerator.upperBoundDT = 10s

# -- Source Node
NewscastNetwork.NewscastSourceNode.NewscastSourceApp.NewscastSource.localPort = 9001
NewscastNetwork.NewscastSourceNode.NewscastSourceApp.NewscastSource.destPort = 9001
NewscastNetwork.NewscastSourceNode.NewscastSourceApp.NewscastSource.startTime = uniform(1s, 2s)

# -- Peer Node
NewscastNetwork.NewscastPeerNode[*].NewscastPeerApp.NewscastPeer.destPort = 9001
NewscastNetwork.NewscastPeerNode[*].NewscastPeerApp.NewscastPeer.localPort = 9001
NewscastNetwork.NewscastPeerNode[*].NewscastPeerApp.NewscastPeer.startTime = uniform(1s, 2s)

# -----------------------------------------------------------------------------
# ----------------------- Homo one router -------------------------------------
# -----------------------------------------------------------------------------
[Config Newscast_Homo_oneRouter_Network]
network = Newscast_Homo_oneRouter_Network
sim-time-limit = 100s

# -----------------------------
# Parameter space
# -----------------------------
#Newscast_Homo_oneRouter_Network.nNodePerRouter = ${500, 1000..10000 step 1000}
#Newscast_Homo_oneRouter_Network.nNodePerRouter = ${100, 200, 400, 1000, 2000, 4000}
#Newscast_Homo_oneRouter_Network.nNodePerRouter = ${500, 1000, 1000, 1000}
Newscast_Homo_oneRouter_Network.nNodePerRouter = 2
#seed-set = 12345
#repeat = 1
#seed-set = ${repetition}

# --- To obtain reproducable results
num-rngs=1
seed-0-mt=9

# -----------------------------
# ------- Recording -----------
# -----------------------------
#**.scalar-recording = false
**.nNodePerRouter.param-record-as-scalar = true
**.vector-recording = false
**.gossip.vector-recording = true

# -----------------------------
# Global modules
# -----------------------------
    # -- Churn:
#*.churnModel = "StaticChurn"
#*.churnModerator.arrivalTime = uniform(0, 10)
*.churnModel = "UniformChurn"
*.churnModerator.lowerBoundAT = 1s
*.churnModerator.upperBoundAT = 10s
*.churnModerator.lowerBoundDT = 2s
*.churnModerator.upperBoundDT = 10s 

# -----------------------------
# Protocol specific settings
# -----------------------------
**.gossip.c = 0
**.appMessageInterval = 1s
**.isoCheckInterval = 1s

# -----------------------------
# Node settings
# -----------------------------
**.localPort = 9000
**.destPort = 9000

# -- Source Node
*.NewscastSourceNode.NewscastSourceApp.gossip.startTime = 0s
#*.NewscastSourceNode.NewscastSourceApp.gossip.startTime = uniform(0s, 1s)

# -- Peer Node
*.NewscastPeerNode[*].NewscastPeerApp.gossip.startTime = uniform(1s, 1.001s)
#*.NewscastPeerNode[*].NewscastPeerApp.gossip.startTime = uniform(2s, 2.001s)

*.NewscastPeerNode[*].NewscastPeerApp.gossip.numberOfPartner = 3
#**.gossip.cacheSize = ${20,20,40,80}
**.gossip.cacheSize = 20
#**.NewscastStatistic.newscastGetRandomIPsLOG = ${"ips_1.txt","ips_2.txt","ips_3.txt","ips_4.txt"}
#**.NewscastStatistic.newscastConnectionsLOG = ${"cons_1.txt","cons_2.txt","cons_3.txt","cons_4.txt"}
# ---------------------- end of configuration file ---------------------------------


[Config Newscast_Homo_oneRouter_Network_1]
network = Newscast_Homo_oneRouter_Network
sim-time-limit = 1000s

# -----------------------------
# Parameter space
# -----------------------------
#Newscast_Homo_oneRouter_Network.nNodePerRouter = ${500, 1000..10000 step 1000}
#Newscast_Homo_oneRouter_Network.nNodePerRouter = ${100, 200, 400, 1000, 2000, 4000}
Newscast_Homo_oneRouter_Network.nNodePerRouter = 1000
#seed-set = 12345
repeat = 1
seed-set = ${repetition}

# -----------------------------
# ------- Recording -----------
# -----------------------------
#**.scalar-recording = false
**.nNodePerRouter.param-record-as-scalar = true
**.vector-recording = false
**.gossip.vector-recording = true

# -----------------------------
# Global modules
# -----------------------------
    # -- Churn:
#*.churnModel = "StaticChurn"
#*.churnModerator.arrivalTime = uniform(0, 10)
*.churnModel = "UniformChurn"
*.churnModerator.lowerBoundAT = 1s
*.churnModerator.upperBoundAT = 10s
*.churnModerator.lowerBoundDT = 2s
*.churnModerator.upperBoundDT = 10s 

# -----------------------------
# Protocol specific settings
# -----------------------------
**.gossip.c = 0
**.appMessageInterval = 1s
**.isoCheckInterval = 1s

# -----------------------------
# Node settings
# -----------------------------
**.localPort = 9000
**.destPort = 9000

# -- Source Node
*.NewscastSourceNode.NewscastSourceApp.gossip.startTime = 0s
#*.NewscastSourceNode.NewscastSourceApp.gossip.startTime = uniform(0s, 1s)

# -- Peer Node
*.NewscastPeerNode[*].NewscastPeerApp.gossip.startTime = uniform(1s, 1.001s)
#*.NewscastPeerNode[*].NewscastPeerApp.gossip.startTime = uniform(2s, 2.001s)

*.NewscastPeerNode[*].NewscastPeerApp.gossip.numberOfPartner = 3
**.gossip.cacheSize = 20
**.NewscastStatistic.newscastGetRandomIPsLOG = "ips_2.txt"
**.NewscastStatistic.newscastConnectionsLOG = "cons_2.txt"
# ---------------------- end of configuration file ---------------------------------


[Config Newscast_Homo_oneRouter_Network_2]
network = Newscast_Homo_oneRouter_Network
sim-time-limit = 1000s

# -----------------------------
# Parameter space
# -----------------------------
#Newscast_Homo_oneRouter_Network.nNodePerRouter = ${500, 1000..10000 step 1000}
#Newscast_Homo_oneRouter_Network.nNodePerRouter = ${100, 200, 400, 1000, 2000, 4000}
Newscast_Homo_oneRouter_Network.nNodePerRouter = 1000
#seed-set = 12345
repeat = 1
seed-set = ${repetition}

# -----------------------------
# ------- Recording -----------
# -----------------------------
#**.scalar-recording = false
**.nNodePerRouter.param-record-as-scalar = true
**.vector-recording = false
**.gossip.vector-recording = true

# -----------------------------
# Global modules
# -----------------------------
    # -- Churn:
#*.churnModel = "StaticChurn"
#*.churnModerator.arrivalTime = uniform(0, 10)
*.churnModel = "UniformChurn"
*.churnModerator.lowerBoundAT = 1s
*.churnModerator.upperBoundAT = 10s
*.churnModerator.lowerBoundDT = 2s
*.churnModerator.upperBoundDT = 10s 

# -----------------------------
# Protocol specific settings
# -----------------------------
**.gossip.c = 0
**.appMessageInterval = 1s
**.isoCheckInterval = 1s

# -----------------------------
# Node settings
# -----------------------------
**.localPort = 9000
**.destPort = 9000

# -- Source Node
*.NewscastSourceNode.NewscastSourceApp.gossip.startTime = 0s
#*.NewscastSourceNode.NewscastSourceApp.gossip.startTime = uniform(0s, 1s)

# -- Peer Node
*.NewscastPeerNode[*].NewscastPeerApp.gossip.startTime = uniform(1s, 1.001s)
#*.NewscastPeerNode[*].NewscastPeerApp.gossip.startTime = uniform(2s, 2.001s)

*.NewscastPeerNode[*].NewscastPeerApp.gossip.numberOfPartner = 3
**.gossip.cacheSize = 40
**.NewscastStatistic.newscastGetRandomIPsLOG = "ips_3.txt"
**.NewscastStatistic.newscastConnectionsLOG = "cons_3.txt"
# ---------------------- end of configuration file ---------------------------------


[Config Newscast_Homo_oneRouter_Network_3]
network = Newscast_Homo_oneRouter_Network
sim-time-limit = 1000s

# -----------------------------
# Parameter space
# -----------------------------
#Newscast_Homo_oneRouter_Network.nNodePerRouter = ${500, 1000..10000 step 1000}
#Newscast_Homo_oneRouter_Network.nNodePerRouter = ${100, 200, 400, 1000, 2000, 4000}
Newscast_Homo_oneRouter_Network.nNodePerRouter = 1000
#seed-set = 12345
repeat = 1
seed-set = ${repetition}

# -----------------------------
# ------- Recording -----------
# -----------------------------
#**.scalar-recording = false
**.nNodePerRouter.param-record-as-scalar = true
**.vector-recording = false
**.gossip.vector-recording = true

# -----------------------------
# Global modules
# -----------------------------
    # -- Churn:
#*.churnModel = "StaticChurn"
#*.churnModerator.arrivalTime = uniform(0, 10)
*.churnModel = "UniformChurn"
*.churnModerator.lowerBoundAT = 1s
*.churnModerator.upperBoundAT = 10s
*.churnModerator.lowerBoundDT = 2s
*.churnModerator.upperBoundDT = 10s 

# -----------------------------
# Protocol specific settings
# -----------------------------
**.gossip.c = 0
**.appMessageInterval = 1s
**.isoCheckInterval = 1s

# -----------------------------
# Node settings
# -----------------------------
**.localPort = 9000
**.destPort = 9000

# -- Source Node
*.NewscastSourceNode.NewscastSourceApp.gossip.startTime = 0s
#*.NewscastSourceNode.NewscastSourceApp.gossip.startTime = uniform(0s, 1s)

# -- Peer Node
*.NewscastPeerNode[*].NewscastPeerApp.gossip.startTime = uniform(1s, 1.001s)
#*.NewscastPeerNode[*].NewscastPeerApp.gossip.startTime = uniform(2s, 2.001s)

*.NewscastPeerNode[*].NewscastPeerApp.gossip.numberOfPartner = 3
**.gossip.cacheSize = 80
**.NewscastStatistic.newscastGetRandomIPsLOG = "ips_4.txt"
**.NewscastStatistic.newscastConnectionsLOG = "cons_4.txt"
# ---------------------- end of configuration file ---------------------------------
